;; Setup load directory
(add-to-list 'load-path "~/.kuso.d/")

;; General configuration ---------------------------------------------------------
(tool-bar-mode -1)
(scroll-bar-mode -1)
(setq x-select-enable-clipboard t)
(column-number-mode t)
(global-linum-mode)

;; Setting up color them -------------------------------------------------------
(eval-after-load "color-theme"
  '(progn
     (color-theme-initialize)
     (color-theme-tomorrow-night-eighties)
))

;; Setting up customization -----------------------------------------------------
(custom-set-variables
  ;; custom-set-variables was added by Custom.
  ;; If you edit it by hand, you could mess it up, so be careful.
  ;; Your init file should contain only one such instance.
  ;; If there is more than one, they won't work right.
 '(c-plugin nil)
 ;'(color-theme-selection "Arjen" nil (color-theme_seldefcustom))
 '(developer-email "--EMAIL--")
 '(developer-name "--FULLNAME--")
 '(kuso-workspace "--WORKSPACE--")
 '(face-font-family-alternatives (quote (("courier" "Monospace" "fixed") ("courier" "CMU Typewriter Text" "fixed") ("Sans Serif" "helv" "helvetica" "arial" "fixed") ("helv" "helvetica" "arial" "fixed"))))
 '(inhibit-startup-screen t)
 '(rng-nxml-auto-validate-flag nil))
(custom-set-faces
  ;; custom-set-faces was added by Custom.
  ;; If you edit it by hand, you could mess it up, so be careful.
  ;; Your init file should contain only one such instance.
  ;; If there is more than one, they won't work right.
 '(font-lock-comment-face ((t (:foreground "orange red"))))
 '(font-lock-keyword-face ((t (:foreground "DeepSkyBlue1")))))

(set-frame-font "Terminus-9")

;; HideShow --------------------
(load-library "hideshow")
(global-set-key (kbd "C-\-") 'hs-toggle-hiding)
(global-set-key (kbd "C-\\") 'toggle-selective-display)

(add-hook 'emacs-lisp-mode-hook 'hs-minor-mode)
(add-hook 'java-mode-hook       'hs-minor-mode)
(add-hook 'lisp-mode-hook       'hs-minor-mode)
(add-hook 'perl-mode-hook       'hs-minor-mode)
(add-hook 'sh-mode-hook         'hs-minor-mode)
(add-hook 'python-mode-hook         'hs-minor-mode)
(add-hook 'js-mode-hook         'hs-minor-mode)

(require 'fringe-helper)
(autoload 'hideshowvis-enable "hideshowvis" "Highlight foldable regions")
(autoload 'hideshowvis-minor-mode
  "hideshowvis"
  "Will indicate regions foldable with hideshow in the fringe."
  'interactive)
(dolist (hook (list 'emacs-lisp-mode-hook
		    'c++-mode-hook
		    'python-mode-hook))
  (add-hook hook 'hideshowvis-enable))


;; auto complete ------------------------------------------------------------
(require 'auto-complete-config)
(add-to-list 'ac-dictionary-directories "~/.kuso.d/ac-dict")
(ac-config-default)

(global-auto-complete-mode t)

;;dabbrev;;
;; dabbrev configuration  ----------------------------------------------------------
(require 'ac-dabbrev)
(setq ac-sources
     (list ac-source-dabbrev
           ))
(global-set-key (kbd "<backtab>") 'dabbrev-expand)
;;/dabbrev;;

;; ssh configuration ---------------------------------------------------------
(setq tramp-default-method "ssh")

;;python-mode;;
;; python configuration ------------------------------------------------------
(autoload 'python-mode "python-mode" "Python Mode." t)
(add-to-list 'auto-mode-alist '("\\.py\\'" . python-mode))
(add-to-list 'interpreter-mode-alist '("python" . python-mode))
(require 'python-mode)
(define-key py-mode-map (kbd "\C-c @") 'uncomment-region)

(autoload 'python-pylint "python-pylint")
(autoload 'pylint "python-pylint")

;;/python-mode;;

;;python-autocomplete;;
;; python autocomplete -------------------------------------------------------
(require 'deferred)
(require 'epc)
(autoload 'jedi:setup "jedi" nil t)
(add-hook 'python-mode-hook 'jedi:setup)
(setq jedi:setup-keys t)
;;/python-autocomplete;;

;;php-mode;;
;; php-mode -------------------------------------------------------------------
(autoload 'php-mode "php-mode" "PHP editing mode" t)
(add-to-list 'auto-mode-alist '("\\.php\\'" . php-mode))
;;/php-mode;;


;;yasnippet;;
;; yasnippet configuration ----------------------------------------------------
(require 'yasnippet)
(yas/initialize)
(yas/load-directory "~/.kuso.d/snippets")
;;/yasnippet;;

;; flymake --------------------------------------------------------------------
(require 'flymake)
(add-hook 'find-file-hook 'flymake-find-file-hook)

;; pyflymake ------------------------------------------------------------------
(when (load "flymake" t)
  (defun flymake-pyflakes-init ()
    (let* ((temp-file (flymake-init-create-temp-buffer-copy
               'flymake-create-temp-inplace))
       (local-file (file-relative-name
		    temp-file
            (file-name-directory buffer-file-name))))
      (list "--ADDR--/pyemacs.sh"  (list local-file))))
  (add-to-list 'flymake-allowed-file-name-masks
             '("\\.py$" flymake-pyflakes-init)))

;; html flymake ---------------------------------------------------------------
(defun flymake-html-init ()
  (let* ((temp-file (flymake-init-create-temp-buffer-copy
		     'flymake-create-temp-inplace))
	 (local-file (file-relative-name
		      temp-file
		      (file-name-directory buffer-file-name))))
    (list "tidy" (list local-file))))

(add-to-list 'flymake-allowed-file-name-masks
	     '("\\.html$\\|\\.ctp" flymake-html-init))

(add-to-list 'flymake-err-line-patterns
	     '("line \\([0-9]+\\) column \\([0-9]+\\) - \\(Warning\\|Error\\): \\(.*\\)"
	       nil 1 2 4))

l;; css flymake -----------------------------------------------------------------
(defun flymake-css-init ()
  (let* ((temp-file (flymake-init-create-temp-buffer-copy
		     'flymake-create-temp-inplace))
	 (local-file (file-relative-name
		      temp-file
		      (file-name-directory buffer-file-name))))
    (list "cssparse" (list local-file))))
(add-to-list 'flymake-allowed-file-name-masks
	     '("\\.css$" flymake-css-init))
(add-to-list 'flymake-err-line-patterns
	     '("\\(.*\\) \\[\\([0-9]+\\):\\([0-9]+\\): \\(.*\\)\\]"
	       nil 2 3 1))
(add-hook 'css-mode-hook
	  (lambda () (flymake-mode t)))

;; flymake shortkeys --------------------------------------------------------------
(global-set-key (kbd "\C-x a") 'flymake-display-err-menu-for-current-line)
(global-set-key (kbd "\C-x p") 'flymake-goto-next-error)

;; JS folding
(add-hook 'js-mode-hook
          (lambda ()
            ;; Scan the file for nested code blocks
            (imenu-add-menubar-index)
            ;; Activate the folding mode
            (hs-minor-mode t)))


;;clang-mode;;
;; C configuration ----------------------------------------------------------------
;; clang auto completion
(require 'auto-complete-clang)
(setq clang-completion-suppress-error 't)

(defun my-c-mode-common-hook()
  (setq ac-auto-start nil)
  (setq ac-expand-on-auto-complete nil)
  (setq ac-quick-help-delay 0.3)
  (define-key c-mode-base-map (kbd "M-3") 'ac-complete-clang)
)

;; Linux style for c programming ------------------------------------------------
(setq c-default-style '((java-mode . "java")
			(awk-mode . "awk")
			(other . "linux")))

(add-hook 'c-mode-common-hook   'hs-minor-mode)
;;/clang-mode;;

;; KUSO configuration ------------------------------------------------------------
(load-file "--KUSOHOME--/src/kuso-ide.el")
(kuso-mode)


;;org-mode;;
;; org-mode ------------------------------------------------------
(add-to-list 'auto-mode-alist '("\\.org\\'" . org-mode))
(add-hook 'org-mode-hook 'turn-on-font-lock) ; not needed when(global-set-key "\C-cl" 'org-store-link)
(global-set-key "\C-ca" 'org-agenda)
(global-set-key "\C-cb" 'org-iswitchb)

(add-hook 'before-save-hook 'delete-trailing-whitespace)
;;/org-mode;;

;;cedet;;
;; Configuring ECB and CEDET
(load-file "~/.kuso.d/cedet/cedet-devel-load.el")
(add-to-list 'semantic-default-submodes 'global-semantic-idle-summary-mode t)
(add-to-list 'semantic-default-submodes 'global-semantic-idle-completions-mode t)

(global-ede-mode 1)
(semantic-load-enable-code-helpers)
(global-srecode-minor-mode 1)
(add-to-list 'load-path "~/.kuso.d/ecb/")
(require 'ecb)
;;/cedet;;

;;lua-mode;;
;; Lua mode --------------------
(autoload 'lua-mode "lua-mode" "Lua editing mode." t)
(add-to-list 'auto-mode-alist '("\\.lua$" . lua-mode))
(add-to-list 'interpreter-mode-alist '("lua" . lua-mode))
(add-hook 'lua-mode-hook         'hs-minor-mode)
;;/lua-mode;;

;; JS folding ----------------
(add-hook 'js-mode-hook
          (lambda ()
            ;; Scan the file for nested code blocks
            (imenu-add-menubar-index)
            ;; Activate the folding mode
            (hs-minor-mode t)))


;; Yaml mode --------------------------------------
(require 'yaml-mode)
(add-to-list 'auto-mode-alist '("\\.yml$" . yaml-mode))

(add-hook 'yaml-mode-hook
	  '(lambda ()
	     (define-key yaml-mode-map "\C-m" 'newline-and-indent)))

;;git-gutter;;
;; git-gutter ------------------
(require 'git-gutter)
(require 'git-gutter-fringe)

(global-git-gutter-mode t)

(add-hook 'ruby-mode-hook 'git-gutter-mode)
(add-hook 'python-mode-hook 'git-gutter-mode)

(global-set-key (kbd "C-x C-g") 'git-gutter:toggle)

(global-set-key (kbd "C-x p") 'git-gutter:previous-diff)
(global-set-key (kbd "C-x n") 'git-gutter:next-diff)
;;/git-gutter;;

;; Yaml mode --------------------------------------
(require 'yaml-mode)
(add-to-list 'auto-mode-alist '("\\.yml$" . yaml-mode))

(add-hook 'yaml-mode-hook
	  '(lambda ()
	     (define-key yaml-mode-map "\C-m" 'newline-and-indent)))


(autoload 'inf-ruby "inf-ruby" "Run an inferior Ruby process" t)
(autoload 'inf-ruby-setup-keybindings "inf-ruby" "" t)
(eval-after-load 'ruby-mode
  '(add-hook 'ruby-mode-hook 'inf-ruby-setup-keybindings))

(add-to-list 'load-path "~/.kuso.d/rinari")
(require 'rinari)

(setq rinari-tags-file-name "TAGS")


(add-to-list 'load-path "~/.kuso.d/rhtml")
(require 'rhtml-mode)
(add-hook 'rhtml-mode-hook
     	  (lambda () (rinari-launch)))



(show-paren-mode t)
